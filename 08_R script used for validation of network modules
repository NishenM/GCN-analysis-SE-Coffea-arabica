# R script used for validation of network modules
# Script for validation of network modules

rm(list = ls(all.names = TRUE))

setwd("D:\\Desktop\\WGCNA_V03")
library(WGCNA)
options(stringsAsFactors = FALSE)
enableWGCNAThreads()

#load data
load(file = "dataInput.RData")
load(file = "networkConstruction.RData")

softPower = 7
adjacency = adjacency(data, power = softPower)

setLabels = c("Network", "Test")
multiExpr = list(Network = list(data = adjacency), Test = list(data = data))
multiColor = list(Network = moduleColors, Test = moduleColors);
nSets = 2

system.time( {
  mp = modulePreservation(multiExpr, multiColor,
                          referenceNetworks = c(1:2),
                          nPermutations = 100,
                          randomSeed = 1,
                          verbose = 3)
} );
# Save the results
save(mp, file = "ModulePreservation.RData")

load(file = "ModulePreservation.RData")
load(file = "permutedStats-actualModules.RData")

ref = 1
test = 2
statsObs = cbind(mp$quality$observed[[ref]][[test]][, -1], mp$preservation$observed[[ref]][[test]][, -1])
statsZ = cbind(mp$quality$Z[[ref]][[test]][, -1], mp$preservation$Z[[ref]][[test]][, -1]);
print( cbind(statsObs[, c("medianRank.pres", "medianRank.qual")],
             signif(statsZ[, c("Zsummary.pres", "Zsummary.qual")], 2)) )
mp_sum = cbind(statsObs[, c("medianRank.pres", "medianRank.qual")],
               signif(statsZ[, c("Zsummary.pres", "Zsummary.qual")], 2))
write.csv(mp_sum,'Module Preservation.csv',quote = F)

# Module labels and module sizes are also contained in the results
modColors = rownames(mp$preservation$observed[[ref]][[test]])
moduleSizes = mp$preservation$Z[[ref]][[test]][, 1];
modColors = gsub("(^|\\s)([a-z])", "\\U\\2", modColors, perl = TRUE)
# leave grey and gold modules out
plotMods = !(modColors %in% c("Grey", "Gold"));
# Text labels for points
text = modColors[plotMods];
# Auxiliary convenience variable
plotData = cbind(mp$preservation$observed[[ref]][[test]][, 2], mp$preservation$Z[[ref]][[test]][, 2])
# Main titles for the plot
mains = c("Preservation Median Rank", "Preservation Zsummary");
# Start the plot
sizeGrWindow(10, 5);
library(grDevices)
pdf(file = "Plots/09-modulePreservation.pdf", width = 12, height = 9)
par(mfrow = c(1,2))
par(mar = c(4.5,4.5,2.5,1))
for (p in 1:2)
{
  min = min(plotData[, p], na.rm = TRUE);
  max = max(plotData[, p], na.rm = TRUE);
  # Adjust plot ranges appropriately
  if (p == 2)
  {
    if (min > -max / 10) min = -max / 10
    ylim = c(min - 0.1 * (max - min), max + 0.1 * (max - min))
  } else
    ylim = c(max + 0.1 * (max - min), min - 0.1 * (max - min))
  
  plot(moduleSizes[plotMods], plotData[plotMods, p], col = 1, bg = modColors[plotMods], pch = 21,
       main = mains[p],
       cex = 2.4,
       ylab = mains[p], xlab = "Module size", log = "x",
       ylim = ylim,
       xlim = c(10, 2000), cex.lab = 1.2, cex.axis = 1.2, cex.main = 1.4)
  
  # Adjust label placement logic
  if (p == 1) {
    text(moduleSizes[plotMods], plotData[plotMods, p], labels = text, pos = 4, cex = 0.8, col = "black")
  } else {
    labelPoints(moduleSizes[plotMods], plotData[plotMods, p], text, cex = 0.8, offs = 0.08)
  }
  
  # For Zsummary, add threshold lines
  if (p == 2)
  {
    abline(h = 0)
    abline(h = 2, col = "blue", lty = 2)
    abline(h = 10, col = "darkgreen", lty = 2)
  }
}
dev.off()
