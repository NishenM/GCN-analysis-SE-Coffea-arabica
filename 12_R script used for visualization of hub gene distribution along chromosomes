# R script used for visualization of hub gene distribution along chromosomes

1.	
# Script for converting the reference genome into a FASTA file

setwd("E:\\MEME")

library(Biostrings)

# Define input and output file paths
input_file <- "GCF_003713225.1_Cara_1.0_genomic.fna"
output_file <- "genome_sequence.fasta"

# Read the FASTA file
genome <- readDNAStringSet(input_file)

# Write the sequence to a new FASTA file
writeXStringSet(genome, filepath = output_file)

cat("Genome sequence saved to", output_file)

2.
# Script for processing the gene information file

setwd("E:\\MEME")

# Read the data from the ordered_gene_results.txt file
gene_data_raw <- readLines("geneInfo.txt")

# Initialize vectors to store extracted information
gene_names <- c()
chromosomes <- c()
starts <- c()
ends <- c()
strand_types <- c()  # New vector to store strand type

# Loop through the lines and extract relevant data
for (line in gene_data_raw) {
  # Extract gene name (e.g., LOC113716848)
  if (grepl("^\\d+\\.\\s+LOC", line)) {  
    gene_name <- gsub("^(\\d+\\.\\s+)(LOC\\d+).*", "\\2", line)
    gene_names <- c(gene_names, gene_name)
  }
  
  # Extract chromosome information (e.g., Chromosome: 11c)
  if (grepl("Chromosome:", line)) {
    chromosome <- gsub(".*Chromosome:\\s*(\\S+).*", "\\1", line)
    chromosomes <- c(chromosomes, chromosome)
  }
  
  # Extract start and end positions, handle 'complement' as well (e.g., (6285227..6288871, complement))
  if (grepl("Annotation:", line)) {
    # Adjusted to capture start and end positions, even with "complement"
    annotation <- gsub(".*Annotation:.*\\((\\d+)\\.\\.(\\d+).*\\).*", "\\1,\\2", line)
    start_end <- strsplit(annotation, ",")[[1]]
    
    # Check if start and end are valid numbers
    start_value <- as.numeric(start_end[1])
    end_value <- as.numeric(start_end[2])
    
    # Only add to vectors if the values are valid numbers
    if (!is.na(start_value) && !is.na(end_value)) {
      starts <- c(starts, start_value)
      ends <- c(ends, end_value)
    } else {
      # If the values are not valid, add NA (or handle differently if needed)
      starts <- c(starts, NA)
      ends <- c(ends, NA)
    }
    
    # Extract strand type (complement or forward)
    if (grepl("complement", line)) {
      strand_types <- c(strand_types, "complement")
    } else {
      strand_types <- c(strand_types, "forward")
    }
  }
}

# Check the lengths of the extracted vectors
cat("Lengths of extracted vectors:\n")
cat("Gene names: ", length(gene_names), "\n")
cat("Chromosomes: ", length(chromosomes), "\n")
cat("Start positions: ", length(starts), "\n")
cat("End positions: ", length(ends), "\n")
cat("Strand types: ", length(strand_types), "\n")

# If lengths match, create the data frame
if(length(gene_names) == length(chromosomes) && length(chromosomes) == length(starts) && length(starts) == length(ends) && length(starts) == length(strand_types)) {
  gene_data <- data.frame(
    gene_name = gene_names,
    chromosome = chromosomes,
    start = starts,
    end = ends,
    strand = strand_types  # Add strand type to the data frame
  )
  
  # Write the data frame to a CSV file
  write.csv(gene_data, "gene_information.csv", row.names = FALSE)
  
  # Print a message indicating the file has been created
  cat("CSV file 'gene_information.csv' has been created.\n")
} else {
  cat("Error: The extracted data lengths do not match. Check the extraction process.\n")
}

3.
# Script for the local visualization of hub genes

setwd("E:\\MEME\\LocalVisualization")

library(ggplot2)
library(Biostrings)
library(readr)

# Read chromosome lengths from FASTA file
get_chromosome_lengths <- function(fasta_file) {
  fasta <- readDNAStringSet(fasta_file)
  chrom_lengths <- setNames(width(fasta), names(fasta))
  return(chrom_lengths)
}

# Read gene data
fasta_file <- "genome_sequence.fasta"
csv_file <- "gene_info.csv"
gene_data <- read_csv(csv_file, show_col_types = FALSE)
chrom_lengths <- get_chromosome_lengths(fasta_file)

# Define the desired chromosome order and ensure "1c" is at the top
desired_chromosome_order <- c("1c", "1e", "2c", "2e", "3c", "3e", "4c", "4e",
                              "5c", "5e", "6c", "6e", "7c", "7e", "8c", "8e",
                              "9c", "9e", "10c", "10e", "11c", "11e", 
                              "NW_020850478.1", "NW_020848566.1", "NW_020849436.1")

# Filter gene data to match the desired chromosomes in the order
gene_data <- gene_data[gene_data$chromosome %in% desired_chromosome_order, ]

# Adjust the y_position according to the desired order (starting from the top)
gene_data$y_position <- as.numeric(factor(gene_data$chromosome, levels = rev(desired_chromosome_order)))

# Ensure chrom_lengths is in the desired order (filter and reorder it)
chrom_lengths <- chrom_lengths[names(chrom_lengths) %in% desired_chromosome_order]
chrom_lengths <- chrom_lengths[rev(desired_chromosome_order)]  # Reverse order for plot

# Compute midpoints for gene positions
gene_data$midpoint <- (gene_data$start + gene_data$end) / 2

# Open a PDF device
pdf("chromosome_plot.pdf", width = 15, height = 8)

# Plot chromosomes and genes
ggplot() +
  geom_segment(data = data.frame(chromosome = names(chrom_lengths), 
                                 start = 0, 
                                 end = chrom_lengths, 
                                 y = 1:length(chrom_lengths)),
               aes(x = start, xend = end, y = y, yend = y), 
               color = "black", linewidth = 1) +
  geom_point(data = gene_data, aes(x = midpoint, y = y_position), 
             color = "red", size = 2) +
  scale_y_continuous(breaks = 1:length(desired_chromosome_order), 
                     labels = sapply(rev(desired_chromosome_order), function(chrom) {
                       if (chrom %in% c("NW_020850478.1", "NW_020848566.1", "NW_020849436.1")) {
                         return(paste("Unplaced-scaffold", chrom))
                       } else {
                         return(chrom)
                       }
                     })) +
  labs(x = "Genomic Position", y = "Chromosome", title = "Hub Genes on Chromosomes") +
  theme_minimal()

# Close the PDF device to save the file
dev.off()
