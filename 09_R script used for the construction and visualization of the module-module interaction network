# R script used for the construction and visualization of the module-module interaction network 
# Script for the construction and visualization of the module-module interaction network

setwd("E:\\WGCNA_V04")

rm(list = ls(all.names = TRUE))

library(WGCNA)
library(igraph)
library(RColorBrewer)

# Load Data
load(file = "dataInput.RData")
load(file = "networkConstruction.RData")

# Remove Grey Module
keep_modules = moduleColors != "grey"
filtered_data = data[, keep_modules]
filtered_moduleColors = moduleColors[keep_modules]

# Compute Module Eigengenes
MEs = moduleEigengenes(filtered_data, colors = filtered_moduleColors)$eigengenes

# Compute Correlation Between Module Eigengenes
module_cor = cor(MEs, use = "complete.obs")

# Apply Threshold to Correlations
threshold = 0.5

# Count Significant Correlations
significant_correlations = sum(abs(module_cor) >= threshold) - ncol(module_cor)  # Subtract diagonal elements

# Print Count of Significant Correlations
cat("Count of significant correlations (|r| >= 0.5):", significant_correlations, "\n")

# Apply Threshold to Correlations
module_cor[abs(module_cor) < threshold] = 0  # Set correlations below the threshold to 0

# Convert Correlation to Adjacency
module_adjacency = abs(module_cor)
diag(module_adjacency) = 0  # Remove diagonal (self-correlations)

# Get Upper Triangular Values for Edges
module_edges = which(upper.tri(module_cor), arr.ind = TRUE)

# Edge List with Weights
edge_list = data.frame(
  from = colnames(module_cor)[module_edges[, 1]],
  to = colnames(module_cor)[module_edges[, 2]],
  weight = module_cor[module_edges]
)

# Filter Edge List for Only Non-zero Weights (i.e., those above the threshold)
edge_list = edge_list[edge_list$weight != 0, ]

# Compute Node Sizes Based on Connectivity
node_size = rowSums(abs(module_cor))
node_size = (node_size - min(node_size)) / (max(node_size) - min(node_size)) * 10  

# Color Gradient for Connectivity (Blue → Green → Yellow → Orange)
connectivity_colors = colorRampPalette(c("blue", "green", "yellow", "red"))(100)
node_color = connectivity_colors[cut(node_size, breaks = 100)]

# Color Gradient for Edge Weights (Purple to Orange)
edge_colors = colorRampPalette(c("purple", "orange"))(100)
edge_list$color = edge_colors[cut(edge_list$weight, breaks = 100)]

# Create Graph Object
g = graph_from_data_frame(d = edge_list, directed = FALSE)

# Assign Node Attributes
V(g)$size = node_size
V(g)$color = node_color
V(g)$label = gsub("^ME", "", colnames(module_cor))
V(g)$label = tools::toTitleCase(V(g)$label)

# Assign Edge Attributes
E(g)$color = edge_list$color
E(g)$weight = abs(edge_list$weight)

# Open PDF for Single Page Plot
pdf("Plots/11_Module_Module_Network.pdf", width = 14, height = 10)

# Define Layout
layout(matrix(c(1, 2, 1, 3), nrow = 2, ncol = 2, byrow = TRUE), widths = c(5.5, 1.0), heights = c(1, 1))

# ---- PLOT NETWORK (LEFT SIDE) ----
par(mar = c(1, 1, 1, 0))
plot(
  g, 
  edge.width = E(g)$weight * 10, 
  vertex.label.cex = 1.5, 
  vertex.frame.color = "black"
)

# ---- DEGREE OF CONNECTIVITY LEGEND (TOP RIGHT) ----
par(mar = c(2, 0, 3, 12))
image(
  1, seq(min(node_size), max(node_size), length = 100), 
  t(matrix(seq(min(node_size), max(node_size), length = 100))), 
  col = connectivity_colors, axes = FALSE
)
axis(4, at = seq(min(node_size), max(node_size), length = 5), labels = round(seq(min(node_size), max(node_size), length = 5), 2))
mtext("Degree of Connectivity", side = 2, line = 1, cex = 1.0)
box()  # Adds a border around this legend

# ---- WEIGHT CORRELATION LEGEND (BOTTOM RIGHT) ----
par(mar = c(3, 0, 2, 12))
image(
  1, seq(-1, 1, length = 100), t(matrix(seq(-1, 1, length = 100))), 
  col = edge_colors, axes = FALSE
)
axis(4, at = seq(-1, 1, length = 5), labels = round(seq(-1, 1, length = 5), 2))
mtext("Weight Correlation", side = 2, line = 1, cex = 1.0)
box() 

# ---- ADD BORDER TO THE ENTIRE DIAGRAM ----
par(fig = c(0, 1, 0, 1), new = TRUE, mar = c(2, 2, 2, 2))
box(lwd = 1)

# Close PDF
dev.off()
